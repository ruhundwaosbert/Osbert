<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="osbo.osbo.osbo">

    <!--
         The ACCESS_COARSE/FINE_LOCATION permissions are not required to use
         Google Maps Android API v2, but you must specify either coarse or fine
         location permissions for the "MyLocation" functionality.
    -->
    <!--
         Runtime permissions for users to allow the app to access these services
           these are access to internal and external storage, access to phone records, and location
    -->
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <uses-permission android:name="android.permission.CALL_PHONE" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.INTERNET" />
    
    <!--
         application tag opens up to allow fundamental app characteristics be defined eg 
            icon, label, general app theme.
    -->

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.Osbo">

        <!--
             The API key for Google Maps-based APIs is defined as a string resource.
             (See the file "res/values/google_maps_api.xml").
             Note that the API key is linked to the encryption key used to sign the APK.
             You need a different API key for each encryption key, including the release key that is used to
             sign the APK for publishing.
             You can define the keys for the debug and release targets in src/debug/ and src/release/.
        -->
        
        <!--
         API key for Google maps
    -->
        <meta-data
            android:name="com.google.android.geo.API_KEY"
            android:value="@string/google_maps_key" />
        
        <!--
         All activities are assigned a specified parent activity, for which they can return to after an event is finished
    -->

        <activity
            android:name=".MapsActivity"
            android:label="@string/title_activity_maps"
            android:parentActivityName=".Home"></activity>
        <activity
            android:name=".Alarm"
            android:label="Alarm Ringing"
            android:parentActivityName=".Set_Alarm" />
        <activity
            android:name=".GetMessage"
            android:label="Message"
            android:parentActivityName=".Intents" />
        <activity
            android:name=".Storage"
            android:label="Storage"
            android:parentActivityName=".Home" />
        <activity
            android:name=".Musicals"
            android:label="Musicals"
            android:parentActivityName=".Home" />
        <activity
            android:name=".Set_Alarm"
            android:label="Alarms"
            android:parentActivityName=".Home" />
        <activity
            android:name=".ScrollViews"
            android:label="Scroll Layouts"
            android:parentActivityName=".Home" />
        <activity
            android:name=".Intents"
            android:label="Intents"
            android:parentActivityName=".Home" />
        <activity
            android:name=".Home"
            android:label="Home" />
        <activity android:name=".Splash">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
<!--
         Background service for the music player.
It works by letting a user start to play a song, but when the user leaves the app, it pauses, and resumes when the app is reopened.
    -->
        <service
            android:name=".MusicService"
            android:enabled="true" />
<!--
         This makes a system call with android to keep track of a background process which specifies how long an alarm will take to ring, so that 
the app is able to receive the alarm event
    -->
        <receiver
            android:name=".AlarmReciever"
            android:enabled="true"
            android:exported="true" />
    </application>

</manifest>
